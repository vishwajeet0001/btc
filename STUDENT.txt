// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StudentDatabase {
   
    struct Student {
        uint256 id;
        string name;
        uint8 age;
    }

 
    Student[] public students;
    
  
    mapping(uint256 => bool) private studentExists;

  
    event StudentAdded(uint256 id, string name, uint8 age);


    function addStudent(uint256 _id, string memory _name, uint8 _age) public {
        require(!studentExists[_id], "Student ID already exists");
        require(_age > 0, "Age must be greater than zero");

        students.push(Student(_id, _name, _age));
        studentExists[_id] = true;

        emit StudentAdded(_id, _name, _age);
    }

    function getStudents() public view returns (Student[] memory) {
        return students;
    }

    receive() external payable {
    }

    fallback() external payable {
    }

    function getContractBalance() public view returns (uint256) {
        return address(this).balance;
    }
}
